function res = eval_voc(cls, imageIds, bboxes, scores, VOCopts, varargin)
% EVAL_VOC evaluate detections on Pascal VOC
% RES = EVAL_VOC(CLS, IMAGEIDS, BBOXES, SCORES, VOCOPTS) evalutes a set of 
%   detections specified by BBOXES and SCORES for the given class, CLS.
%   IMAGEIDS is a cell array containing the ids of the images associated 
%   with each score and bounding box. 
%
%   EVAL_VOC takes the following options:
%   `suffix` :: ''
%    A suffix which is appended to the result file generated by the script.
%
%   `evalVersion` :: 'official'
%     A string denoting the evaluation script to be used to produced results.
%     'official' indicates that the original script released with the pascal
%     challnege should be used.  However, since this runs extremely slowly, 
%     the option 'fast' may be used in development.
%
%   `useResSalt` :: true
%    If true, then a random string (known as a salt) is added to the end of the
%    results file name (prevents concurrent evaluations from wreaking havoc by
%    over-writing each other)
%
%   `rmResults` :: true
%    Delete results files after AP computations have completed
%
%   `drawCurve` :: true
%    plot a curve for the current class 
%    
%   `compId` :: 'comp4'
%    The identifier of the competition (comp4 indicates the use of outside 
%    data).
%
%   Author: Samuel Albanie, based directly on Ross Girshick's R-CNN code
%   (copyright licence inlcuded below)
%
% ---------------------------------------------------------
% Copyright (c) 2014, Ross Girshick
%
% This file is part of the R-CNN code and is available
% under the terms of the Simplified BSD License provided in
% LICENSE. Please retain this notice and LICENSE if you use
% this file (or any portion of it) in your project.
% ---------------------------------------------------------

opts.suffix = '' ;
opts.useResSalt = true ;
opts.rmResults = true ;
opts.compId = 'comp4' ;
opts.drawCurve = true ;
opts.evalVersion = 'official' ; 
[opts, ~] = vl_argparse(opts, varargin) ;

if ~strcmp(opts.suffix, ''), suffix = ['_' opts.suffix] ; end
if useResSalt
  prev_rng = rng ; rng shuffle ; salt = sprintf('%d', randi(100000)) ;
  res_id = [opts.compId '-' salt] ; rng(prev_rng) ;
else
  res_id = opts.compId ;
end

resPath = sprintf(VOCopts.detrespath, res_id, cls) ; 
fid = fopen(resPath, 'w') ; % write out detections in PASCAL format and score
for i = 1:numel(imageIds)
  fprintf(fid, '%s %f %.3f %.3f %.3f %.3f\n', imageIds{i}, scores(i), bboxes(i,:));
end
fclose(fid) ;

tic ; % Bug in VOCevaldet requires that tic has been called first

switch opts.evalVersion
  case 'official'
    [recall, prec, ap] = VOCevaldet(VOCopts, res_id, cls, opts.drawCurve) ;
  case 'fast'
    [recall, prec, ap] = x10VOCevaldet(VOCopts, res_id, cls, opts.drawCurve) ;
  otherwise
    error('Evaluation version %s not recognised', opts.evalVersion) ;
end

ap_auc = VOCap07(recall, prec) ; % use 2007 evaluation
ylim([0 1]) ; xlim([0 1]) ; % fix plot limits

tail = sprintf('%s_pr_%s.jpg', cls, suffix) ;
print(gcf, '-djpeg', '-r0', fullfile(VOCopts.cacheDir, tail)) ;
fprintf('!!! %s : %.4f %.4f\n', cls, ap, ap_auc) ;
args = {'recall', 'prec', 'ap', 'ap_auc'} ;
save(fullfile(VOCopts.cacheDir,  sprintf('%s_pr_%s',cls, suffix)), args) ;

res.recall = recall ; res.prec = prec ; res.ap = NaN ; res.ap_auc = ap_auc ;
if opts.rmResults, delete(resPath) ; end

% -----------------------------
function ap = VOCap07(rec,prec)
% -----------------------------
% From the PASCAL VOC 2007 devkit
ap = 0 ;
for t=0:0.1:1
  p=max(prec(rec>=t)) ;
  if isempty(p)
    p=0 ;
  end
  ap=ap+p/11 ;
end
